name: Validate GitHub config
on:
  pull_request:
    paths:
      - '**/.github/actions/**/action.yaml'
      - '**/.github/actions/**/action.yml'
      - '**/.github/workflows/**/*.yaml'
      - '**/.github/workflows/**/*.yml'
    types:
      - opened
      - edited
      - synchronize

concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref }}"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions: {}

env:
  CACHE_KEY: validate-github-action-config-schema-cache-${{ github.head_ref }}
  CACHE_DIR: ${{ github.workspace }}/cache
  NPM_LOCK_FILE_PATH: ${{ CACHE_DIR }}/package-lock.json
  ACTION_SCHEMA_FILE_PATH: ${{ CACHE_DIR }}/github-action.json-schema.json
  WORKFLOW_SCHEMA_FILE_PATH: ${{ CACHE_DIR }}/github-workflow.json-schema.json
  DRAFT_7_SCHEMA_FILE_PATH: ${{ CACHE_DIR }}/draft-07.json-schema.json
  CACHED_DIR_LIST: |
    ${{ NPM_LOCK_FILE_PATH }}
    ${{ ACTION_SCHEMA_FILE_PATH }}
    ${{ WORKFLOW_SCHEMA_FILE_PATH }}
    ${{ DRAFT_7_SCHEMA_FILE_PATH }}

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
    steps:
      - name: Checkout ${{ matrix.pkg_name }}
        uses: actions/checkout@v3

      - name: Setup cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DIR_LIST }}
          key: ${{ env.CACHE_KEY }}

      - name: Initialize cache directory
        if: ${{ steps.cache.outputs.cache-hit != 'true'}}
        run: |
          mkdir -p ${{ env.CACHE_DIR }}
          echo "{}" > ${{ env.NPM_LOCK_FILE_PATH }}
          wget https://json.schemastore.org/github-action.json -O ${{ env.ACTION_SCHEMA_FILE_PATH }}
          wget https://json.schemastore.org/github-workflow.json -O ${{ env.WORKFLOW_SCHEMA_FILE_PATH }}
          wget http://json-schema.org/draft-07/schema -O ${{ env.DRAFT_7_SCHEMA_FILE_PATH }}

      - name: Configure Node
        id: node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: npm
          cache-dependency-path: ${{ env.NPM_LOCK_FILE_PATH }}

      - name: Pre-install validator
        if: ${{ steps.node.outputs.cache-hit != 'true' }}
        run: npm install -g pajv # Used on next job to perform the validation (will be cached by setup-node action)

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: json
          filters: |
            actions:
              - added|modified: '**/.github/actions/**/action.yaml'
              - added|modified: '**/.github/actions/**/action.yml'
            workflows:
              - added|modified: '**/.github/workflows/**/*.yaml'
              - added|modified: '**/.github/workflows/**/*.yml'

      - name: Install required NodeJs libs
        run:  npm install yaml # Used below to generate the matrix (won't be cached by setup-node action !)

      - name: Prepare matrix
        id: matrix
        uses: actions/github-script@v6
        with:
          script: |
            const yaml = require('yaml');
            const fs = require('fs');
            async function getName(filepath) {
              const content = fs.readFileSync(filepath, 'utf8')
              const decoded = yaml.parse(content);
            
              return 'name' in decoded ? decoded.name : null;
            }
            const list = [];
            for (const item of JSON.parse('${{ steps.changes.outputs.workflows_files }}')) {
              list.push({
                file_path: item,
                type: 'workflow',
                schema_file_path: '${{ env.WORKFLOW_SCHEMA_FILE_PATH }}',
                name: await getName(item),
              });
            }
            for (const item of JSON.parse('${{ steps.changes.outputs.actions_files }}')) {
              list.push({
                file_path: item,
                type: 'action',
                schema_file_path: '${{ env.ACTION_SCHEMA_FILE_PATH }}',
                name: await getName(item),
              });
            }

            return list;
  

  validate:
    name: ${{ matrix.name && format('"{0}" {1}', matrix.name, matrix.type) || matrix.file_path }}
    runs-on: ubuntu-latest
    needs: [ metadata ]
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include: ${{ fromJson(needs.metadata.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DIR_LIST }}
          key: ${{ env.CACHE_KEY }}

      - name: Configure Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
          cache: npm
          cache-dependency-path: ${{ env.NPM_LOCK_FILE_PATH }}

      - name: Validate
        env:
          OUTPUT_FILE_PATH: /tmp/pajv.output
          ERRORS_FILE_PATH: /tmp/pajv.errors
        run: |
          ($(npm -g config get prefix)/bin/pajv test \
            --valid \
            --errors=line \
            --json-pointers \
            --extend-refs=true \
            -s ${{ matrix.schema_file_path }} \
            -r ${{ env.DRAFT_7_SCHEMA_FILE_PATH }} \
            -d ${{ matrix.file_path }} 2>&1 \
          || true) >$OUTPUT_FILE_PATH
          echo "::debug ::$(cat $OUTPUT_FILE_PATH)"
          if [[ "$(cat $OUTPUT_FILE_PATH | tail -n +2 | wc -l)" -gt 0 ]]; then
            cat $OUTPUT_FILE_PATH | tail -n +2 | jq -r --color-output ' map("\(.dataPath): \(.message) (\(.params.additionalProperty))") | unique | join("\n") ' >$ERRORS_FILE_PATH  2>&1
            while IFS= read -r line; do
              echo "::error file=${{ matrix.file }}::$line"
            done <<< "$(cat $ERRORS_FILE_PATH)"
            exit 2
          fi
