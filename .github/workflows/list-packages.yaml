name: List packages
on:
  workflow_call:
    inputs:
      split-branch-pattern:
        description: 'Split branch pattern'
        type: string
        required: false
    outputs:
      packages:
        description: List of packages
        value: ${{ jobs.enhance.outputs.packages }}
      updated_packages:
        description: List of updated package names
        value: ${{ jobs.enhance.outputs.updated_package_names }}

permissions: {}

jobs:
  packages:
    name: Packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.list-generator.outputs.list }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            composer.lock
            vendor
          key: ${{ github.head_ref || github.ref_name }}-${{ hashFiles('**/composer.json') }}-list-packages-composer

      - name: Install macrorepo
        run: make install

      - name: Generate list
        id: list-generator
        shell: bash
        # Do not run command inside a $(...) clause, else errors won't be caught !
        run: |
          ./vendor/bin/monorepo-builder packages:list \
            --all-fields \
            ${{ inputs.split-branch-pattern && format('--split-branch-pattern=''{0}''', inputs.split-branch-pattern) || '' }} \
            --json | tee list.json 
          echo "list=$(cat list.json)" >> $GITHUB_OUTPUT

  enhance:
    name: Enhance
    needs: [packages]
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.list-generator.outputs.list }}
      updated_package_names: ${{ steps.updated-packages-list-generator.outputs.list }}
    steps:
      - name: Generate path list
        id: path_list
        shell: bash
        # Do not run command inside a $(...) clause, else errors won't be caught !
        run: |
          echo '${{ needs.packages.outputs.packages }}' | \
            jq -r -M 'map("            \(.name):\n              - added|modified: '"'"'\(.path)/**'"'"'") | add' | \
            tee filters.txt
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "filters<<$EOF" >> "$GITHUB_OUTPUT"
          cat filters.txt >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"

      - name: Find updated packages
        uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: json
          filters: ${{ steps.path_list.outputs.filters }}

      - name: Re-enerate packages list
        id: list-generator
        shell: bash
        # Do not run command inside a $(...) clause, else errors won't be caught !
        run: |
          echo '[${{ needs.packages.outputs.packages }},${{ steps.changes.outputs.changes }}]' | \
            jq -r -M '.[1] as $list | .[0] | map({ "\(.name)": (. + { "state": (.name as $name | if $list | contains([$name]) then "updated" else "none" end ) } ) }) | add | tostring' | \
            tee list.json 
          echo "list=$(cat list.json)" >> $GITHUB_OUTPUT

      - name: Generate updated packages list
        id: updated-packages-list-generator
        shell: bash
        # Do not run command inside a $(...) clause, else errors won't be caught !
        run: |
          echo '${{ steps.list-generator.outputs.list }}' | \
            jq -c -M 'map(select(.state == "updated")) | map(.name)' | \
            tee list.json 
          echo "list=$(cat list.json)" >> $GITHUB_OUTPUT
