name: Packages sync

on:
  push:
    branches:
      - develop
      - maintenance/**/*

concurrency:
  group: "${{ github.workflow }}-${{ github.ref_name }}"
  cancel-in-progress: false # false => wait previous workflow execution before starting

defaults:
  run:
    shell: bash

permissions: {}

env:
  COMMIT_AUTHOR_NAME: yoanm
  COMMIT_AUTHOR_EMAIL: yoanm@users.noreply.github.com

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.generator2.outputs.list }}
      packages_to_synchronize: ${{ steps.packages_to_synchronize-generator.outputs.result }}
      packages_with_maintenance_branch_to_update: ${{ steps.packages_with_maintenance_branch_to_update-generator.outputs.result }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-php${{ steps.setup-php.outputs.php-version }}-${{ hashFiles('**/composer.json', '**/composer.lock') }}-metadata

      - name: Install macrorepo
        run: make install

      - name: Generate list
        id: list-generator
        uses: ./.github/actions/list-packages

      - name: Compute packages versions
        id: packages-versions
        uses: ./.github/actions/list-packages-latest-version

      - name: Detect and append new versions
        id: generator
        uses: actions/github-script@v6
        with:
          script: |
            async function tagExists(owner, repo, tag) {
              try {
                const res = await github.git.getRef({ owner, repo, ref: `tags/${tag}` });
            
                return res.status === 200;
              } catch(error) {
                return false;
              }
            }

            const packageList = JSON.parse('${{ steps.list-generator.outputs.list }}');
            const versionList = JSON.parse('${{ steps.packages-versions.outputs.list }}');

            for (const [name, version] of Object.entries(versionList)) {
                const pkg = packageList[name];
                if (pkg && !(await tagExists(pkg.split_repository.organization, pkg.split_repository.name, version))) {
                    pkg.version = version;
                }
            }
            
            return packageList;

      - name: Resolve branches
        id: generator2
        uses: ./.github/actions/resolve-packages-branches
        with:
          list: ${{ steps.generator.outputs.result }}

      - name: Generate package list with package branch or tag to synchronize
        id: packages_to_synchronize-generator
        uses: actions/github-script@v6
        with:
          script: |
            const packageList = JSON.parse('${{ steps.generator2.outputs.list }}');
            
            for (const key in packageList) {
                const pkg = packageList[key];
                if (typeof pkg != 'object'
                    || typeof pkg.split_repository !== 'object'
                    || !pkg.split_repository.organization
                    || !pkg.split_repository.name
                    || !pkg.split_repository.branch
                ) {
                    delete packageList[key];
                }
            }
            
            const finalList = Object.keys(packageList).length > 0 ? packageList : [];
            console.log(`after=${JSON.stringify(finalList)}`);
            
            return finalList;

      - name: Generate package list with maintenance branch to update
        id: packages_with_maintenance_branch_to_update-generator
        uses: actions/github-script@v6
        with:
          script: |
            const packageList = JSON.parse('${{ steps.generator2.outputs.list }}');
            
            for (const key in packageList) {
                const pkg = packageList[key];
                if (typeof pkg != 'object'
                    || typeof pkg.monorepo !== 'object'
                    || !pkg.monorepo.maintenance_branch
                ) {
                    delete packageList[key];
                }
            }
            
            const finalList = Object.keys(packageList).length > 0 ? packageList : [];
            console.log(`after=${JSON.stringify(finalList)}`);
            
            return finalList;

  # First synchronize packages repositories
  synchronize-packages:
    name: Synchronize ${{ matrix.package.name }}
    needs: [ metadata ]
    if: ${{ needs.metadata.outputs.packages_to_synchronize != '[]' && needs.metadata.outputs.packages_to_synchronize != '' }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        package: ${{ fromJson(needs.metadata.outputs.packages_to_synchronize).* }}
    uses: ./.github/workflows/synchronize-package-commit-list.yaml
    with:
      sha_begin: ${{ github.event.before }}
      sha_end: ${{ github.sha }}
      package_directory: ${{ matrix.package.path }}
      repository_organization: ${{ matrix.package.split_repository.organization }}
      repository_name: ${{ matrix.package.split_repository.name }}
      repository_branch: ${{ matrix.package.split_repository.branch }}
      repository_tag: ${{ matrix.package.split_repository.tag }}

  # Then update monorepo maintenance branches => maintenance branches synchronization to packages repositories
  # branches and tag will be done by this workflow (but from instances triggered for each maintenance branch updated)
  update-monorepo-maintenance-branches:
    name: Update ${{ matrix.package.name }} monorepo maintenance branch
    needs: [ metadata, synchronize-packages ]
    if: ${{ needs.metadata.outputs.packages_with_maintenance_branch_to_update != '[]' && needs.metadata.outputs.packages_with_maintenance_branch_to_update != '' }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        package: ${{ fromJson(needs.metadata.outputs.packages_with_maintenance_branch_to_update).* }}
    permissions:
      contents: write
    uses: ./.github/workflows/update-branch.yaml
    with:
      head: ${{ github.ref_name }}
      base: ${{ matrix.package.monorepo.maintenance_branch }}
