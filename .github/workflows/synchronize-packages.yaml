name: Synchronize packages

on:
  push:
    branches:
      - develop
      - maintenance/**/*

concurrency:
  group: "${{ github.workflow }}-${{ github.ref_name }}"
  cancel-in-progress: false # false => wait previous workflow execution before starting

defaults:
  run:
    shell: bash

permissions: {}

env:
  COMMIT_AUTHOR_NAME: yoanm
  COMMIT_AUTHOR_EMAIL: yoanm@users.noreply.github.com

jobs:
  metadata:
    name: Metadata
    uses: ./.github/workflows/list-packages.yaml

  enhanced-metadata:
    name: Metadata / Create lists
    needs: [ metadata ]
    if: ${{ needs.metadata.outputs.packages != '[]' && needs.metadata.outputs.packages != '' }}
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.generator2.outputs.list }}
      packages_to_synchronize: ${{ steps.packages_to_synchronize-generator.outputs.list }}
      packages_with_maintenance_branch_to_update: ${{ steps.packages_with_maintenance_branch_to_update-generator.outputs.list }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Compute packages versions
        id: packages-versions
        uses: ./.github/actions/list-packages-latest-version

      - name: Detect and append new versions
        id: generator
        uses: actions/github-script@v6
        with:
          script: |
            async function tagExists(owner, repo, tag) {
              try {
                const res = await github.git.getRef({ owner, repo, ref: `tags/${tag}` });
            
                return res.status === 200;
              } catch(error) {
                return false;
              }
            }

            const packageList = JSON.parse('${{ needs.metadata.outputs.packages }}');
            const versionList = JSON.parse('${{ steps.packages-versions.outputs.list }}');

            for (const [name, version] of Object.entries(versionList)) {
                const pkg = packageList[name];
                if (pkg && !(await tagExists(pkg.split_repository.organisation, pkg.split_repository.name, version))) {
                    pkg.version = version;
                }
            }
            
            return packageList;

      - name: Resolve branches
        id: generator2
        uses: ./.github/actions/resolve-packages-branches
        with:
          list: ${{ steps.generator.outputs.result }}

      - name: Generate package list with package branch or tag to synchronize
        id: packages_to_synchronize-generator
        run: |
          echo '${{ steps.generator2.outputs.list }}' | \
            jq -c -M 'map(select(.split_repository.branch != null))' \
            > list.json
          cat list.json | jq
          echo "list=$(cat list.json)" >> $GITHUB_OUTPUT

      - name: Generate package list with maintenance branch to update
        id: packages_with_maintenance_branch_to_update-generator
        run: |
          echo '${{ steps.generator2.outputs.list }}' | \
            jq -c -M 'map(select(.monorepo.maintenance_branch != null))' \
            > list.json
          cat list.json | jq
          echo "list=$(cat list.json)" >> $GITHUB_OUTPUT

  # First synchronize packages repositories
  synchronize-packages:
    name: Synchronize ${{ matrix.package.name }} branches & tag
    needs: [ enhanced-metadata ]
    if: ${{ needs.enhanced-metadata.outputs.packages_to_synchronize != '[]' && needs.enhanced-metadata.outputs.packages_to_synchronize != '' }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        package: ${{ fromJson(needs.enhanced-metadata.outputs.packages_to_synchronize).* }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out monorepo code
        uses: actions/checkout@v3

      - name: Synchronize
        if: ${{ matrix.package.split_repository.branch != null }}
        env:
          GITHUB_TOKEN: ${{ secrets.SPLIT_ACCESS_TOKEN }}
        uses: symplify/monorepo-split-github-action@v2.3.0
        with:
          package_directory: ${{ matrix.package.path }}
          repository_organization: ${{ matrix.package.split_repository.organisation }}
          repository_name: ${{ matrix.package.split_repository.name }}
          user_name: ${{ env.COMMIT_AUTHOR_NAME }}
          user_email: ${{ env.COMMIT_AUTHOR_EMAIL }}
          branch: ${{ matrix.package.split_repository.branch }}
          tag: ${{ matrix.package.split_repository.tag }}

  # Then update monorepo maintenance branches => maintenance branches synchronization to packages repositories
  # branches and tag will be done by this workflow (but from instances triggered for each maintenance branch updated)
  update-monorepo-maintenance-branches:
    name: Update ${{ matrix.package.name }} monorepo maintenance branch
    needs: [ enhanced-metadata, synchronize-packages ]
    if: ${{ needs.enhanced-metadata.outputs.packages_with_maintenance_branch_to_update != '[]' && needs.enhanced-metadata.outputs.packages_with_maintenance_branch_to_update != '' }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        package: ${{ fromJson(needs.enhanced-metadata.outputs.packages_with_maintenance_branch_to_update).* }}
    permissions:
      contents: write
    uses: ./.github/workflows/update-branch.yaml
    with:
      head: ${{ github.ref_name }}
      base: ${{ matrix.package.monorepo.maintenance_branch }}
