name: Validate GitHub Action/Workflow config file
description: Perform related JSON-schema validation upon provided file

inputs:
  file:
    description: 'File path to validate'
    required: true
  type:
    description: 'Either "workflow" or "action". Default to "workflow"'
    required: false
    default: 'workflow'
  ignoredPatternRegexp:
    description: 'Regexp excluding errors'
    required: false
    default: 'workflow'


runs:
  using: composite
  steps:
    - name: Setup cache
      id: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/cache/package-lock.json
          ${{ github.workspace }}/cache/github-action.json-schema.json
          ${{ github.workspace }}/cache/github-workflow.json-schema.json
          ${{ github.workspace }}/cache/draft-07.json-schema.json
        key: validate-github-action-config

    - name: Create cache directory
      if: ${{ !steps.cache.output.hit }}
      shell: bash
      run: |
        mkdir -p ${{ github.workspace }}/cache
        echo "{}" > ${{ github.workspace }}/cache/package-lock.json

    - name: Configure Node
      id: node
      uses: actions/setup-node@v3
      with:
        node-version: 18
        check-latest: true
        cache: npm
        cache-dependency-path: ${{ github.workspace }}/cache/package-lock.json

    - name: Download schemas
      if: ${{ !steps.cache.output.hit }}
      shell: bash
      run: |
        wget https://json.schemastore.org/github-action.json -O ${{ github.workspace }}/cache/github-action.json-schema.json
        wget https://json.schemastore.org/github-workflow.json -O ${{ github.workspace }}/cache/github-workflow.json-schema.json
        wget http://json-schema.org/draft-07/schema -O ${{ github.workspace }}/cache/draft-07.json-schema.json

    - name: Install validator
      if: ${{ !steps.node.output.cache-hit }}
      shell: bash
      run: npm install -g pajv

    - name: Perform validation
      shell: bash
      env:
        OUTPUT_FILE_PATH: ${{ github.workspace }}/cache/pajv.output
        ERRORS_FILE_PATH: ${{ github.workspace }}/cache/pajv.errors
      run: |
        ($(npm -g config get prefix)/bin/pajv test \
          --valid \
          --errors=line \
          --json-pointers \
          --extend-refs=true \
          -s ${{ github.workspace }}/cache/github-${{ inputs.type }}.json-schema.json \
          -r ${{ github.workspace }}/cache/draft-07.json-schema.json \
          -d ${{ inputs.file }} 2>&1 \
        || true) >$OUTPUT_FILE_PATH
        echo "::debug ::$(cat $OUTPUT_FILE_PATH)"
        if [[ "$(cat $OUTPUT_FILE_PATH | tail -n +2 | wc -l)" -gt 0 ]]; then
          cat $OUTPUT_FILE_PATH | tail -n +2 | jq -r --color-output ' map("\(.dataPath): \(.message) (\(.params.additionalProperty))") | unique | join("\n") ' >$ERRORS_FILE_PATH  2>&1
          while IFS= read -r line; do
            echo "::error file=${{ inputs.file }}::$line"
          done <<< "$(cat $ERRORS_FILE_PATH)"
          exit 2
        fi
          
        exit 0
