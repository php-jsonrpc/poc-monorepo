name: Resolve packages branches
description: |
  Append `monorepo.maintenance_branch`, `split_repository.branch` and `split_repository.tag` properties to provided list.
  - `monorepo.maintenance_branch` (string | null): Branch to update inside the monorepo (=maintenance branch). `null` if nothing to update
  - `split_repository.branch` (string | null): Branch to synchronize on package repository side. `null` if nothing to synchronize
  - `split_repository.tag` (string | null): Tag to create on package repository side. `null` if nothing to create

inputs:
  list:
    description: JSON list of packages generated by `monorepo-builder packages:list`
    required: true

outputs:
  list:
    description: Provided list augmented with `monorepo.maintenance_branch`, `monorepo.maintenance_branch` and `split_repository.branch` properties
    value: ${{ steps.generator.outputs.result }}

runs:
  using: composite
  steps:
    - name: Enhance list
      id: generator
      shell: bash
      uses: actions/github-script@v6
      with:
        script: |
          const versionRegex = /^([0-9]+)\.([0-9]+).+/;
          const packageList = JSON.parse('${{ inputs.list }}');
          const currentBranch = "${{ github.ref_name }}";
          const isMonorepoDevelopBranch = currentBranch === "develop";
          
          for (const name of Object.keys(packageList)) {
              const pkg = packageList[name];
              const maintenancePrefix = `maintenance/${pkg.name}/`;
              const isMonorepoMaintenanceBranch = isMonorepoDevelopBranch !== true && currentBranch.startsWith(maintenancePrefix);
              const shortVersion = pkg.version !== null && pkg.version.match(versionRegex)
                  ? pkg.version.replace(versionRegex, '$1.$2')
                  : undefined;
              
              pkg.monorepo = pkg.monorepo ? pkg.monorepo : {};
              pkg.split_repository = pkg.split_repository ? pkg.split_repository : {};
              
              pkg.monorepo.maintenance_branch= isMonorepoDevelopBranch && shortVersion ? `${maintenancePrefix}${shortVersion}` : null;
              
              if (isMonorepoMaintenanceBranch) {
                  pkg.split_repository.branch = currentBranch.replace(maintenancePrefix, '');
              } else if (isMonorepoDevelopBranch) {
                  pkg.split_repository.branch = 'develop';
              } else {
                  pkg.split_repository.branch = null;
              }
              pkg.split_repository.tag=isMonorepoMaintenanceBranch && pkg.version ? pkg.version : null;
          }
          
          return packageList;
